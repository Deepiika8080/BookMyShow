// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id       @default(uuid())
  username         String
  password         String
  bookings         Booking[]
  payments         Payments[]
  role             String            @default("user")
  token            String?
  seats            Seat[]
  movies           Movie[] 
}

model Movie {
  id               String          @id       @default(uuid())
  title            String 
  description      String
  imageUrl         String
  banner           String
  bokings          Booking[]
  userId           String         
  user             User           @relation(fields:[userId] , references:[id])
  Payments         Payments[]
  seats            Seat[]
  seatPrice        Int
  totalSeats       Int        
  cinemahall       String
  startTime        String
}

model Booking {
  id                 String          @id       @default(uuid())
  totalPrice         Int
  movieId            String         
  userId             String   
  movie              Movie           @relation(fields:[movieId], references:[id])       
  user               User            @relation(fields:[userId], references:[id])
  seats              Int
  paymentId          String
  payment            Payments        @relation(fields:[paymentId] , references:[id])
  totalSeats         Int             @default(0)
}

model Seat {
  id                 String         @id       @default(uuid())
  seatNo             Int
  seatType                  seatType
  movieId            String         
  userId             String   
  movie              Movie           @relation(fields:[movieId], references:[id])       
  user               User            @relation(fields:[userId], references:[id])
  booked             Boolean         
  price              Int
}

model Payments {
  id                 String          @id       @default(uuid())
  userId             String         
  movieId            String         
  user               User            @relation(fields:[userId], references:[id])
  movie              Movie           @relation(fields:[movieId], references:[id])
  paymentType        PaymentState
  bookings           Booking[]
}

enum PaymentState {
  success
  failed
  pending
}

enum seatType {
  General    
  Vip    
}
